#!/bin/bash

declare -r mg2_version="0.10.4"
declare -r mg2_os="$(uname -s | awk '{print tolower($0)}')"
declare -r mg2_global_dir="$(echo ~/.mg2)"
declare mg2_loading_pid=

mg2_logo() {
    local logo='

                                    _   _ _ _ _ _ _
                                   /  |/  / ____/__ \
                                  / /|_/ / / __ __/ /
                                 / /  / / /_/ // __/
                                /_/  /_/\____//____/

       		       Magento 2 Docker Stack environment service
    '

    echo -e "\033[1;33m$logo
                                 121ecommerce
                                Magento Docker
                             environment and toolset
                                 v$mg2_version
\033[0m"
}

mg2_loading() {
    tput civis
    mg2_start_spinner & mg2_loading_pid=$!
    sleep 0.1
}

mg2_loading_install() {
    tput civis
    mg2_start_progress & mg2_loading_pid=$!
    sleep 0.1
}

mg2_start_spinner() {
    local sp=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    #local sp=('/' '—' '\' '|')
    #local sp=('◐' '◓' '◑' '◒')
    #local sp=('◢' '◣' '◤' '◥')

    printf "\033[1;33m"

    while [[ "$(ps a | awk '{print $1}' | grep $$)" ]]
    do
        for i in "${sp[@]}"
        do
            echo -en "\b$i"
            sleep 0.1
        done
    done

    printf "\033[0m"
}

mg2_start_progress() {
    local sp=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏') iteration=0 length=0 log

    printf "\033[1;33m"

    while [[ "$(ps a | awk '{print $1}' | grep $$)" ]]
    do
        if [[ "$iteration" == "0" ]]
        then
            log="$(<${mg2_log})"

            if [[ "$log" == *"Progress:"* ]]
            then
                log=" $(echo "$log" | grep "Progress: " | tail -1 | tr -d "[Proges: ]")  "
                length=${#log}
                printf %${length}s | tr " " "\b"
                echo -en "$log"
            fi
        fi

        for i in "${sp[@]}"
        do
            echo -en "\b$i"
            (( iteration++ ))
            sleep 0.1
        done

        [[ "$iteration" == "10" ]] && iteration=0
    done

    printf %${length}s | tr " " "."
    printf "\033[0m"
}

mg2_stop_spinner() {
    if [[ -n ${mg2_loading_pid} ]]
    then
        kill ${mg2_loading_pid} && \
        wait ${mg2_loading_pid} >/dev/null 2>&1
        mg2_loading_pid=
    fi

    printf "\b\033[0m"
}

mg2_trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

mg2_msg() {
    local text="$1"
    local chars=$((${#text}))
    local cols=$(tput cols)

    if [[ $chars -gt $cols ]]
    then
        text="$(echo "$text" | fold -s -w"$cols")"
    fi

    echo -en "\033[0;32m$text\033[0m"
}

mg2_info() {
    echo -en "\033[0;33m$@\033[0m"
}

mg2_info_bold() {
    echo -en "\033[1;33m$@\033[0m"
}

mg2_dots() {
    local text="$1"
    local chars=$((${#text} + 3))
    local cols=$(tput cols)
    local last

    cols=$(( cols > 80 ? 80 : cols ))

    if [[ $chars -gt $cols ]]
    then
        text="$(echo "$text" | fold -s -w"$cols")"
        last="${text##*$'\n'}"
        chars=$((${#last} + 3))
    fi

    mg2_msg "$text$(printf %$((cols - chars))s | tr " " ".")  "
}

mg2_error() {
    echo -en "\033[0;31m$@\033[0m"
}

mg2_error_bold() {
    echo -en "\033[1;31m$@\033[0m"
}

mg2_result() {
    local res=$1 \
          noexit=$2 \
          error

    mg2_stop_spinner >/dev/null 2>&1
    tput cnorm

    if [[ $1 -eq 0 ]]
    then
        mg2_info_bold "\b✔\n"
    else
        mg2_error_bold "\b✘\n"

        if [[ -f "${mg2_log}" ]]
        then
            error="$(<"${mg2_log}")"
            [[ -n ${error} ]] && mg2_error "$error\n"
        fi

        [[ -z ${noexit} ]] && exit 1
    fi
}

mg2_ask_bool() {
    local message=$1 \
          only_y=$2 \
          opts \
          res \
          text \
          lines

    tput cnorm
    stty echo

    if [[ -z ${only_y} ]]
    then
        opts="[Y/n]"
    else
        opts="[Y]"
    fi

    while :
    do
        text="$(mg2_msg "$message $(mg2_info_bold "$opts")") "
        lines=$(echo "$text" | wc -l)
        read -n 1 -srp "$text" res
        echo
        mg2_erase_prev_lines ${lines}
        if [[ "$res" = "Y" || "$res" = "y" ]]
        then
            mg2_msg "$message $(mg2_info_bold "[$res]")\n"
            res=1
            break
        elif [[ -z ${only_y} ]] && [[ "$res" = "N" || "$res" = "n" ]]
        then
            mg2_msg "$message $(mg2_info_bold "[$res]")\n"
            res=
            break
        fi
    done

    mg2_res=${res}

    stty -echo
    tput civis
}

mg2_ask_text() {
    local message=$1 \
          default=$2 \
          error=$3 \
          error_info=$4 \
          validate=$5 \
          validate_value=() \
          res res_count \
          error_count valid=1

    shift
    shift
    shift
    shift
    shift

    validate_value=("$@")

    tput cnorm
    stty echo

    temp_term=${TERM}; TERM=vt100;

    while [[ -z ${res} || -z ${valid} ]]
    do
        valid=
        error_count=0

        exec 5>&1

        message=$(mg2_msg "$message")

        if [[ -n ${default} ]]
        then
            echo -e "$message $(mg2_info_bold "[$default]")"
        else
            echo -e "$message"
        fi

        if [[ -n ${res} && -z ${valid} ]]
        then
            error_count="$(echo -en "$(mg2_error "$(printf "$error" "$res")\n"; \
                [[ -n ${error_info} ]] && mg2_error "$error_info")" | tee >(cat - >&5))"
            error_count="$(echo -en "$error_count" | awk 'END { print NR }')"
        fi

        read -r res
        res_count=$(echo "$res" | awk 'END { print NR }')

        [[ ${error_count} -eq 0 ]] && (( res_count++ ))

        while IFS= read line
        do
           res="$line"
        done < <(printf '%s\n' "$res")

        mg2_erase_prev_lines $((( res_count + error_count )))

        res=$(mg2_trim "$res" | tr -dc '[:print:]')

        if [[ -z ${res} ]]
        then
            res="$default"
        fi

        if ${validate} "$res" "${validate_value[@]}"
        then
            valid=1
            mg2_res="$res"
        fi
    done

    TERM=${temp_term}

    exec 5>&-

    echo -e "$message $(mg2_info_bold "[$res]")"

    stty -echo
    tput civis
}

mg2_erase_current_line() {
    echo -ne "\033[999D\033[K\033[999D"
}

mg2_erase_prev_lines() {
    local count=${1:-1}

    while (( count > 0 ))
    do
        tput cuu 1 && tput el
        (( count-- ))
    done
}

mg2_in_array () {
    local entry match="$1"
    shift
    for entry; do
        [[ "$entry" == "$match" ]] && return 0
    done
    return 1
}

mg2_requirements() {
    local test pass=1

    mg2_info_bold "\n[Checking requirements]\n\n"

    mg2_dots "OS compatibility check"
    mg2_loading

    case ${mg2_os} in
        darwin|linux)
            mg2_result 0
        ;;
        *)
            echo "Currently we are not supporting $mg2_os based OS yet." >"${mg2_log}"
            mg2_result 1 1
            pass=0
        ;;
    esac

    mg2_dots "Docker installation check"
    mg2_loading
    hash docker 2>/dev/null
    test=$?

    [[ "$test" == "1" ]] && echo "Docker command line interface was not found." >"${mg2_log}"

    mg2_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    mg2_dots "Docker-compose installation check"
    mg2_loading
    hash docker-compose 2>/dev/null
    test=$?

    [[ "$test" == "1" ]] && echo "Docker-compose command line interface was not found." >"${mg2_log}"

    mg2_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    test=0
    mg2_dots "Ports 80, 443, 33060 and 53 availability check"
    mg2_loading

    local ports=

    if [[ -z "$(docker ps \
                    --filter "label=com.docker.compose.project=mg2" \
                    --filter "label=com.docker.compose.service=traefik" \
                    -q)" ]]
    then
        if lsof -PiTCP:80 -sTCP:LISTEN -t >/dev/null 2>&1
        then
            ports="TCP 80"
        fi

        if lsof -PiTCP:443 -sTCP:LISTEN -t >/dev/null 2>&1
        then
            if [[ -z ${ports} ]]
            then
                ports="TCP 443"
            else
                ports="$ports, 443"
            fi
        fi

        if lsof -PiTCP:33060 -sTCP:LISTEN -t >/dev/null 2>&1
        then
            if [[ -z ${ports} ]]
            then
                ports="TCP 33060"
            else
                ports="$ports, 33060"
            fi
        fi
    fi

    if [[ -z "$(docker ps \
                    --filter "label=com.docker.compose.project=mg2" \
                    --filter "label=com.docker.compose.service=dnsmasq" \
                    -q)" ]] && lsof -PiUDP:53 -tn >/dev/null 2>&1
    then
        if [[ -z ${ports} ]]
        then
            ports="UDP 53"
        else
            ports="$ports and UDP 53"
        fi
    fi

    if [[ -n ${ports} ]]
    then
        test=1
        echo "$ports already used by some other service(s).\n" >"${mg2_log}"
    fi

    mg2_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    if [[ ${pass} -eq 0 ]]
    then
        exit 1
    fi

    mg2_dots "Password required to trust the CA certificate and create symlinks"
    mg2_loading
    mg2_result 0
    tput cnorm
    while ! sudo -p "$(printf "\033[0mPassword:")$(printf "\033[1;31m%s" " ")" true
    do
        exit 1
    done
    tput civis
    mg2_erase_prev_lines 1
}

mg2_install() {
    local archive test

    mg2_info_bold "\n[Installing commands]\n\n"

    mg2_dots "Locating archive"
    mg2_loading
    archive=$(awk '/^__ARCHIVED__/ {print NR + 1; exit 0; }' "${0}")
    test=$?
    mg2_result ${test}

    mg2_dots "Extracting data"
    mg2_loading 2
    tail -n+${archive} "${0}" | tar -xzp -C ~ && >"${mg2_log}" 2>&1
    test=$?
    if [[ "$test" == "0" ]]
    then
        sudo ln -sf "${mg2_global_dir}/bin/mg2" /usr/local/bin/mg2

        if [[ ! -f "${mg2_global_dir}/ssl/config/v3_ext.conf" ]]
        then
            mv "${mg2_global_dir}/ssl/config/v3_ext.blank.conf" "${mg2_global_dir}/ssl/config/v3_ext.conf"
        else
            rm -f "${mg2_global_dir}/ssl/config/v3_ext.blank.conf"
        fi

        if [[ ! -f "${mg2_global_dir}/.env" ]]
        then
            yes | cp -rf "${mg2_global_dir}/docker/.env" "${mg2_global_dir}/" >/dev/null 2>&1
        fi
    fi
    mg2_result ${test}

    if [[ ! -f "${mg2_global_dir}/ssl/certs/rootCA.crt" ]] || [[ ! -f "${mg2_global_dir}/ssl/private/rootCA.key" ]]
    then
        mg2_info_bold "\n[Installing CA certificate]\n\n"

        if [[ "$mg2_os" == "darwin" ]]
        then
            pass="mg2"
        else
            pass="mg20"
        fi

        mg2_dots "Generating private key for CA certificate"
        mg2_loading
        mkdir -p "${mg2_global_dir}/ssl"/{certs,crl,new,private,serial} >"${mg2_log}" 2>&1 && \
        openssl genrsa -aes256 -passout pass:${pass} -out "${mg2_global_dir}/ssl/private/rootCA.key" 4096 >"${mg2_log}" 2>&1
        test=$?
        mg2_result ${test}

        mg2_dots "Signing CA certificate"
        mg2_loading
        openssl req -new -x509 -nodes -sha256 -days 825 \
            -passin pass:${pass} -subj "/O=mg121ecommerce/OU=IT/CN=mg2.local" \
            -config "${mg2_global_dir}/ssl/config/rootca.conf" \
            -key "${mg2_global_dir}/ssl/private/rootCA.key" \
            -out "${mg2_global_dir}/ssl/certs/rootCA.crt" >"${mg2_log}" 2>&1
        test=$?
        mg2_result ${test}

        mg2_dots "Trusting root CA certificate"
        mg2_loading
        case "$mg2_os" in
            darwin)
                sudo security delete-certificate -c 'mg2.local' >/dev/null 2>&1
                sudo security add-trusted-cert -d -r trustRoot \
                        -k /Library/Keychains/System.keychain "${mg2_global_dir}/ssl/certs/rootCA.crt" >"${mg2_log}" 2>&1
                test=$?
            ;;
            linux)
                if [[ -d /usr/local/share/ca-certificates ]]
                then
                    yes | sudo cp -rf "${mg2_global_dir}/ssl/certs/rootCA.crt" \
                        /usr/local/share/ca-certificates/mg2-root-ca.crt >"${mg2_log}" 2>&1 && \
                    sudo update-ca-certificates >"${mg2_log}" 2>&1
                    test=$?
                elif [[ -d /etc/pki/ca-trust/source/anchors ]]
                then
                    yes | sudo cp -rf "${mg2_global_dir}/ssl/certs/rootCA.crt" \
                        /etc/pki/ca-trust/source/anchors/mg2-root-ca.crt >"${mg2_log}" 2>&1 && \
                    sudo update-ca-trust >"${mg2_log}" 2>&1 && \
                    sudo update-ca-trust enable >"${mg2_log}" 2>&1
                    test=$?
                else
                    echo "Currently, we are not supporting yet trusting of the root CA certificate on your OS." >"${mg2_log}"
                    test=1
                fi
            ;;
        esac
        mg2_result ${test}
    fi

    case ${mg2_os} in
        darwin)
            if [[ ! -f /etc/resolver/test || \
                "$(</etc/resolver/test)" != "nameserver 127.0.0.1" ]]
            then
                mg2_info_bold "\n[Configuring .test domains resolver]\n\n"

                mg2_dots "Creating the resolver file"
                mg2_loading
                sudo mkdir -p /etc/resolver && \
                sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/test'
                mg2_result $?
            fi

            if [[ ! -f "${mg2_global_dir}/mutagen/mutagen" || \
                "$("${mg2_global_dir}/mutagen/mutagen" version)" != "0.11.4" ]]
            then
                if [[ ! -f "${mg2_global_dir}/mutagen/mutagen" ]]
                then
                    mg2_info_bold "\n[Installing Mutagen for docker sync performance]\n\n"
                    mkdir -p "${mg2_global_dir}/mutagen" >"${mg2_log}" 2>&1
                else
                    mg2_info_bold "\n[Updating Mutagen to a newer version]\n\n"
                fi

                curl -L \
                    "https://github.com/mutagen-io/mutagen/releases/download/v0.11.4/mutagen_darwin_amd64_v0.11.4.tar.gz" | \
                    tar xzf - -o -C "${mg2_global_dir}/mutagen/"
                chmod 0755 "${mg2_global_dir}/mutagen/mutagen"
            fi
        ;;
    esac
}

mg2_on_exit() {
    mg2_stop_spinner
    stty echo
    tput cnorm
    echo

    if [[ "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")" != "mg2" ]]
    then
        rm -- "$0"
    fi
}

trap mg2_on_exit EXIT

mg2_log="${mg2_global_dir}/log"
mkdir -p "${mg2_global_dir}"
touch "${mg2_log}"

if ! docker info > /dev/null 2>&1
then
    mg2_error "Docker is not running or Docker service is not reachable.\n"
    exit 1
fi

if ! docker info > /dev/null 2>&1
then
    mg2_error "Docker is not running or Docker service is not reachable.\n"
    exit 1
fi

if [[ "$0" != "/usr/local/bin/mg2" ]]
then
    mg2_logo

    if [[ ! -f "${mg2_global_dir}/build" ]]
    then
        message="Install mg121ecommerce Magento Docker environment and toolset to your system?"
    else
        mg2_is_update=1
        mg2_res="$(mg2 --version 2>/dev/null | tr -dc '[:print:]' | sed 's/\[0m\[?12l\[?25h//')"

        if [[ "$mg2_res" == "$mg2_version" ]]
        then
            message="Hooray! You have the latest version of mg121ecommerce toolset. Reinstall?"
        else
            message="mg121ecommerce toolset v$mg2_res is found on your system. Update it to v$mg2_version?"
        fi
    fi

    mg2_ask_bool "$(echo -n "$message")"

    if [[ -z ${mg2_res} ]]
    then
        exit 0
    fi

    mg2_requirements
    rm -rf "${mg2_global_dir}"/{bin,completions,dnsmasq,docker,functions,local,traefik,www,build} >/dev/null 2>&1
    mg2_install
    . "${mg2_global_dir}/functions/mg2"

    mg2_global_load_env
    mg2_global_save_env

    mg2_sign "mg2.test"

    mg2_global up

    mg2_info_bold "\n[Installation finished]\n\n"

    mg2_msg "mg121ecommerce toolset is successfully installed!\n"
    mg2_msg "Run \`mg2 --help\` command for usage information.\n"
    mg2_msg "Visit local https://mg121ecommerce.mg2.test to check useful links to included services.\n\n"

    if [[ -z ${mg2_is_update} ]]
    then
        mg2_ask_bool "Initialize new project in the current directory?"

        if [[ -n ${mg2_res} ]]
        then
            mg2_init
        fi
    fi
else
    . "${mg2_global_dir}/functions/mg2"
    declare -r mg2_project_dir="$(mg2_get_project_dir)"
    mg2_log="${mg2_project_dir}/.mg2/log"

    mg2_load_env

    case "$1" in
        global)
            shift
            mg2_global_load_env
            mg2_log="${mg2_global_dir}/log"
            mg2_global $@
        ;;
        init)
            shift
            mg2_init $@
        ;;
        sign)
            shift
            mg2_sign $@
        ;;
        --version)
            echo -n "$mg2_version"
        ;;
        --help)
            mg2_help
        ;;
        *)
            case "$1" in
                up|down)
                    ! mg2_in_array "--help" $@ && mg2_local_project_check_dir
                    mg2_local $@
                ;;
                add|info|remove|restart|start|status|stop|update)
                    ! mg2_in_array "--help" $@ && mg2_local_project_check
                    mg2_local $@
                ;;
                bash|cli|composer|db|grunt|magento|m|magerun|mr|mutagen|node|npm|pull|push|pwa|redis|share|sync|varnish|urn)
                    ! mg2_in_array "--help" $@ && mg2_local_active_project_check

                    mg2_res=$1
                    shift

                    if [[ "$mg2_res" == "m" ]]
                    then
                        mg2_res="magento"
                    elif [[ "$mg2_res" == "mr" ]]
                    then
                        mg2_res="magerun"
                    fi

                    [[ $(type -t mg2_${mg2_res}) == "function" ]] && mg2_${mg2_res} $@
                ;;
                *)
                    if [[ "$1" != "" ]]
                    then
                        mg2_error "Unknown argument \`$@\`. Run \`mg2 --help\` for usage information.\n"
                        exit 1
                    else
                        mg2_help
                    fi
                ;;
            esac
        ;;
    esac
fi
